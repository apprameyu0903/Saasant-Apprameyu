/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.100
 * Generated at: 2025-05-18 15:04:31 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class add_005fcustomer_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


    private String escapeHtml(String input) {
        if (input == null) {
            return "";
        }
        return input.replace("&", "&amp;")
                    .replace("<", "&lt;")
                    .replace(">", "&gt;")
                    .replace("\"", "&quot;")
                    .replace("'", "&#x27;");
    }

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\n');
      out.write('\n');
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("    <meta charset=\"UTF-8\">\n");
      out.write("    <title>Add New Customer</title>\n");
      out.write("    <link rel=\"stylesheet\" href=\"style.css\">\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("    <div class=\"container\">\n");
      out.write("         <div class=\"page-header\">\n");
      out.write("             <h1 class=\"header-title\">Billing System</h1>\n");
      out.write("         </div>\n");
      out.write("         <div class=\"content-wrapper\">\n");
      out.write("            <div class=\"title-section\">\n");
      out.write("                 <h2 class=\"page-title\">Add New Customer</h2>\n");
      out.write("            </div>\n");
      out.write("\n");
      out.write("             ");

                 String errorMessage = (String) request.getAttribute("errorMessage");
                 if (errorMessage == null) { errorMessage = request.getParameter("error"); }

                 if (errorMessage != null && !errorMessage.isEmpty()) {
             
      out.write("\n");
      out.write("                    <p style=\"color: red; margin-bottom: 15px;\">Error: ");
      out.print( escapeHtml(errorMessage) );
      out.write("</p>\n");
      out.write("             ");

                 }
             
      out.write("\n");
      out.write("\n");
      out.write("            <form action=\"CustomerServlet\" method=\"post\" class=\"customer-form\" id=\"addCustomerForm\">\n");
      out.write("                <input type=\"hidden\" name=\"action\" value=\"add\"/>\n");
      out.write("\n");
      out.write("                <div class=\"form-group\">\n");
      out.write("                    <label for=\"customerId\" class=\"form-label\">Customer ID:</label>\n");
      out.write("                    <input type=\"text\" id=\"customerId\" name=\"customerId\" class=\"form-input\" required>\n");
      out.write("                </div>\n");
      out.write("                <div class=\"form-group\">\n");
      out.write("                    <label for=\"customerName\" class=\"form-label\">Customer Name:</label>\n");
      out.write("                    <input type=\"text\" id=\"customerName\" name=\"customerName\" class=\"form-input\" required>\n");
      out.write("                </div>\n");
      out.write("                <div class=\"form-group\">\n");
      out.write("                    <label for=\"mobileNumber\" class=\"form-label\">Mobile Number:</label>\n");
      out.write("                    <input type=\"tel\" id=\"mobileNumber\" name=\"mobileNumber\" class=\"form-input\" required pattern=\"[0-9]{10}\" title=\"Enter a 10-digit mobile number\">\n");
      out.write("                </div>\n");
      out.write("                 <div class=\"form-group\">\n");
      out.write("                    <label for=\"customerLocation\" class=\"form-label\">Location:</label>\n");
      out.write("                    <input type=\"text\" id=\"customerLocation\" name=\"customerLocation\" class=\"form-input\">\n");
      out.write("                </div>\n");
      out.write("\n");
      out.write("                <div class=\"form-actions\">\n");
      out.write("                    <button type=\"submit\" class=\"submit-btn\">Add Customer</button>\n");
      out.write("                    <button type=\"reset\" class=\"reset-btn\">Reset</button>\n");
      out.write("                    <a href=\"CustomerServlet\" class=\"cancel-btn-link\"><button type=\"button\" class=\"cancel-btn\">Cancel</button></a>\n");
      out.write("                </div>\n");
      out.write("            </form>\n");
      out.write("        </div>\n");
      out.write("        <footer class=\"page-footer\">\n");
      out.write("             &copy; 2025 Billing System\n");
      out.write("        </footer>\n");
      out.write("    </div>\n");
      out.write("    \n");
      out.write("	<script src=\"https://code.jquery.com/jquery-3.5.1.min.js\"></script>\n");
      out.write("    <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js\"></script>\n");
      out.write("    <script>\n");
      out.write("        // API endpoint for customer operations\n");
      out.write("        const API_BASE_URL = 'http://localhost:8081/api/customers'; \n");
      out.write("\n");
      out.write("        $(document).ready(function() {\n");
      out.write("            $('#addCustomerForm').on('submit', function(event) {\n");
      out.write("                event.preventDefault(); \n");
      out.write("                const customerData = {\n");
      out.write("                    customerId: $('#customerId').val().trim(),\n");
      out.write("                    customerName: $('#customerName').val().trim(),\n");
      out.write("                    mobileNumber: $('#mobileNumber').val().trim(),\n");
      out.write("                    customerLocation: $('#customerLocation').val().trim()\n");
      out.write("                };\n");
      out.write("                if (!customerData.customerId || !customerData.customerName || !customerData.mobileNumber) {\n");
      out.write("                    showAlert('Customer ID, Name, and Mobile Number are required.', 'warning');\n");
      out.write("                    return;\n");
      out.write("                }\n");
      out.write("                \n");
      out.write("                console.log(\"Submitting customer data:\", customerData);\n");
      out.write("                $.ajax({\n");
      out.write("                    url: API_BASE_URL, \n");
      out.write("                    type: 'POST',\n");
      out.write("                    contentType: 'application/json',    \n");
      out.write("                    data: JSON.stringify(customerData), \n");
      out.write("                    dataType: 'json',                   \n");
      out.write("                    success: function(response, textStatus, jqXHR) {\n");
      out.write("                        \n");
      out.write("                        console.log(\"Customer added successfully:\", response);\n");
      out.write("                        showAlert('Customer \"' + response.customerName + '\" added successfully!', 'success');\n");
      out.write("                        $('#addCustomerForm')[0].reset(); \n");
      out.write("                        $('#customerId').focus(); \n");
      out.write("                    },\n");
      out.write("                    error: function(jqXHR, textStatus, errorThrown) {\n");
      out.write("                        console.error(\"Error adding customer:\", jqXHR.status, jqXHR.responseText, errorThrown);\n");
      out.write("                        let errorMessage = 'Error adding customer.';\n");
      out.write("                        if (jqXHR.responseJSON && jqXHR.responseJSON.message) {\n");
      out.write("                            errorMessage = jqXHR.responseJSON.message;\n");
      out.write("                        } else if (jqXHR.status === 400) {\n");
      out.write("                            \n");
      out.write("                            try {\n");
      out.write("                                const errData = JSON.parse(jqXHR.responseText);\n");
      out.write("                                if(errData && errData.message) errorMessage = errData.message;\n");
      out.write("                                else errorMessage = \"Invalid data submitted (400). Please check your input. The Customer ID might already exist.\";\n");
      out.write("                            } catch(e) {\n");
      out.write("                                if(jqXHR.responseText && jqXHR.responseText.length < 100) { \n");
      out.write("                                    errorMessage = \"Invalid data (400): \" + jqXHR.responseText;\n");
      out.write("                                } else {\n");
      out.write("                                    errorMessage = \"Invalid data submitted (400). Please check your input. The Customer ID might already exist.\";\n");
      out.write("                                }\n");
      out.write("                            }\n");
      out.write("                        } else if (jqXHR.status === 0) {\n");
      out.write("                            errorMessage = 'Cannot connect to server. Please check network or if server is running.';\n");
      out.write("                        } else if (jqXHR.statusText) {\n");
      out.write("                            errorMessage = 'Error: ' + jqXHR.statusText + ' (Status: ' + jqXHR.status + ')';\n");
      out.write("                        }\n");
      out.write("                        showAlert(errorMessage, 'danger');\n");
      out.write("                    }\n");
      out.write("                });\n");
      out.write("            });\n");
      out.write("        });\n");
      out.write("\n");
      out.write("\n");
      out.write("        function showAlert(messageText, alertType) {\n");
      out.write("            const alertBoxArea = $(\"#alertPlaceholder\");\n");
      out.write("            alertBoxArea.html(''); \n");
      out.write("            const newAlertHtml =\n");
      out.write("                `<div class=\"alert alert-");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${alertType}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(" alert-dismissible fade show\" role=\"alert\">\n");
      out.write("                    ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${messageText}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\n");
      out.write("                    <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n");
      out.write("                </div>`;\n");
      out.write("            alertBoxArea.html(newAlertHtml);\n");
      out.write("            setTimeout(function() {\n");
      out.write("                alertBoxArea.find(\".alert\").fadeOut(\"slow\", function() { $(this).remove(); });\n");
      out.write("            }, 5000); \n");
      out.write("        }\n");
      out.write("    </script>\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
