<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Customer List</title>
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <%-- Link to your existing style.css if it's not already included via Bootstrap or if it has specific styles you need --%>
    <link rel="stylesheet" type="text/css" href="${pageContext.request.contextPath}/style.css">
</head>
<body>

    <header class="page-header">
        <div class="container">
            <span class="header-title">Billing System</span>
        </div>
    </header>

    <div class="container mt-4">
        <div class="content-wrapper">
            <div class="d-flex justify-content-between align-items-center mb-3 title-section">
                <h1 class="page-title mb-0">Customer Management</h1>
                <a href="CustomerServlet?action=showAddForm" class="btn btn-primary add-customer-btn">Add New Customer</a>
            </div>

            <c:if test="${not empty successMessage}">
                <div class="alert alert-success alert-dismissible fade show" role="alert" id="successMessageDiv">
                    ${successMessage}
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                </div>
            </c:if>
            <c:if test="${not empty errorMessage}">
                <div class="alert alert-danger alert-dismissible fade show" role="alert" id="errorMessageDiv">
                    ${errorMessage}
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                </div>
            </c:if>
            <div id="ajaxAlertPlaceholder"></div>

            <div class="search-bar-container">
                <div class="form-group">
                    <input type="text" class="form-control" id="customerSearchInput" placeholder="Search customers by Name, ID, Mobile, or Location...">
                    <div id="customerSuggestionsDropdown" class="list-group" style="display: none;">
                    </div>
                </div>
            </div>

            <div class="table-container">
                <table class="table table-striped customer-table" id="customerTable">
                    <thead class="thead-dark">
                        <tr>
                            <th>ID</th>
                            <th>Name</th>
                            <th>Mobile</th>
                            <th>Location</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <!-- <tbody>
                        <c:forEach var="customer" items="${customers}">
                            <tr id="customerRow-${customer.customerId}">
                                <td>${customer.customerId}</td>
                                <td class="name">${customer.customerName}</td>
                                <td class="mobile">${customer.mobileNumber}</td>
                                <td class="location">${customer.customerLocation}</td>
                                <td>
                                    <a class="action-link edit-link text-primary mr-2" data-id="${customer.customerId}">Edit</a>
                                    <a class="action-link delete-link text-danger" data-id="${customer.customerId}">Delete</a>
                                </td>
                            </tr>
                        </c:forEach>
                         <tr id="noResultsRow" style="display: none;">
                            <td colspan="5" class="text-center">No customers found matching your search.</td>
                        </tr>
                    </tbody>-->
                </table>
            </div>
        </div>
    </div>

    <div class="modal fade" id="editCustomerModal" tabindex="-1" role="dialog" aria-labelledby="editCustomerModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <form id="editCustomerForm">
                    <div class="modal-header">
                        <h5 class="modal-title" id="editCustomerModalLabel">Edit Customer</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <input type="hidden" id="editCustomerId" name="customerId">
                        <div class="form-group">
                            <label for="editCustomerName">Name</label>
                            <input type="text" class="form-control" id="editCustomerName" name="customerName" required>
                        </div>
                        <div class="form-group">
                            <label for="editMobileNumber">Mobile Number</label>
                            <input type="text" class="form-control" id="editMobileNumber" name="mobileNumber" required pattern="[0-9]{10,15}">
                        </div>
                        <div class="form-group">
                            <label for="editCustomerLocation">Location</label>
                            <input type="text" class="form-control" id="editCustomerLocation" name="customerLocation" required>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Save changes</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <footer class="page-footer">
        <p>&copy; <script>document.write(new Date().getFullYear())</script> Billing System. All rights reserved.</p>
    </footer>

    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

    <script>
    $(document).ready(initializePage);

    /**
     * Sets up initial event handlers and loads initial customer data.
     */
    function initializePage() {
        // Fade out server-side messages after a delay
        setTimeout(fadeOutMessages, 3000);

        // Event handlers for various UI elements
        $("#customerSearchInput").on("keyup", handleCustomerSearchInputKeyup);
        $("#customerSuggestionsDropdown").on("click", ".suggestion-item", handleSuggestionItemClick);
        $(document).on("click", handleDocumentClickForSuggestions); // Hide suggestions when clicking outside
        $("#customerSearchInput").on("focus", handleCustomerSearchInputFocus);
        $("#customerTable").on("click", ".delete-link", handleDeleteLinkClick);
        $("#customerTable").on("click", ".edit-link", handleEditLinkClick);
        $("#editCustomerForm").on("submit", handleEditFormSubmit);

        // Fetch and display all customers when the page is initialized
        getAndShowCustomers(""); // Pass empty string to fetch all customers
    }

    /**
     * Fades out success and error message divs (typically for server-side messages).
     */
    function fadeOutMessages() {
        $("#successMessageDiv").fadeOut("slow");
        $("#errorMessageDiv").fadeOut("slow");
    }

    /**
     * Displays a dismissible alert message in the #ajaxAlertPlaceholder div.
     * @param {string} messageText - The message to display.
     * @param {string} alertType - The Bootstrap alert type (e.g., "success", "danger", "warning").
     */
    function showMyAlertRevised(messageText, alertType) {
        var alertBoxArea = $("#ajaxAlertPlaceholder");
        // Clear any existing alert in the placeholder before showing a new one
        alertBoxArea.html('');
        var newAlertHtml =
            '<div class="alert alert-' + alertType + ' alert-dismissible fade show" role="alert">' +
            messageText +
            '<button type="button" class="close" data-dismiss="alert" aria-label="Close">' +
            '<span aria-hidden="true">&times;</span>' +
            '</button>' +
            '</div>';
        alertBoxArea.html(newAlertHtml);

        // Set a timeout to automatically fade out the new alert
        setTimeout(function() {
            alertBoxArea.find(".alert").fadeOut("slow", function() {
                $(this).remove(); // Remove the alert from DOM after fading out
            });
        }, 3000);
    }

    /**
     * Handles keyup events on the customer search input field.
     * Triggers a search if input length is sufficient, or loads all customers if input is empty.
     */
    function handleCustomerSearchInputKeyup() {
        var searchInputValue = $("#customerSearchInput").val().trim();

        if (searchInputValue.length >= 1) { // Or your preferred minimum search length
            getAndShowCustomers(searchInputValue);
        } else {
            // If search input is cleared, load all customers
            getAndShowCustomers("");
            $("#customerSuggestionsDropdown").html("").hide(); // Clear suggestions
        }
    }

    /**
     * Fetches customer data from the server based on the search text (or all if searchText is empty)
     * and then calls functions to populate the table and suggestion box.
     * @param {string} searchText - The text to search for. Pass "" to get all customers.
     */
    function getAndShowCustomers(searchText) {
        // Optional: Display a loading message in the table
        // $("#customerTable tbody").html('<tr><td colspan="5" class="text-center">Loading...</td></tr>');

        $.ajax({
            url: "CustomerServlet?action=searchCustomersAjax",
            type: "GET",
            data: { query: searchText },
            dataType: "json",
            success: function handleCustomerSearchSuccess(customersFromServer) {
                console.log("Data received from server:", customersFromServer);
                populateCustomerTable(customersFromServer); // Populate the main table

                // Populate suggestions only if there was actual search text
                if (searchText && searchText.length > 0) {
                    fillSuggestionsBox(customersFromServer, searchText);
                } else {
                    $("#customerSuggestionsDropdown").html("").hide(); // Clear/hide suggestions if no search text
                }
            },
            error: function handleCustomerSearchError(xhr, status, error) {
                console.error("AJAX Error fetching customers:", status, error, xhr.responseText);
                showMyAlertRevised("Oops! Something went wrong while fetching customer data.", "danger");
                // Clear table and show error message in the "noResultsRow"
                $("#customerTable tbody").html("");
                $("#noResultsRow").find('td').text("Error loading customer data. Please try again.");
                $("#noResultsRow").show();
                $("#customerSuggestionsDropdown").html("").hide();
            }
        });
    }

    /**
     * Populates the customer HTML table with the provided list of customer data.
     * @param {Array<Object>} customersList - An array of customer objects.
     */
    function populateCustomerTable(customersList) {
        var tableBodyElement = $("#customerTable tbody");
        tableBodyElement.html(""); // Clear any existing rows (including "No results" or "Loading")

        if (customersList && customersList.length > 0) {
            $("#noResultsRow").hide(); // Hide the "no results" row if it was visible

            customersList.forEach(function(customer) {
                var tableRowHtml =
                    '<tr id="customerRow-' + customer.customerId + '">' +
                        '<td>' + (customer.customerId || 'N/A') + '</td>' +
                        '<td class="name">' + (customer.customerName || 'N/A') + '</td>' +
                        '<td class="mobile">' + (customer.mobileNumber || 'N/A') + '</td>' +
                        '<td class="location">' + (customer.customerLocation || 'N/A') + '</td>' +
                        '<td>' +
                            '<a class="action-link edit-link text-primary mr-2" href="#" data-id="' + customer.customerId + '">Edit</a>' +
                            '<a class="action-link delete-link text-danger" href="#" data-id="' + customer.customerId + '">Delete</a>' +
                        '</td>' +
                    '</tr>';
                tableBodyElement.append(tableRowHtml);
            });
        } else {
            // If the list is empty or null, display the "noResultsRow"
            // Adapt message based on whether a search was active
            var message = $("#customerSearchInput").val().trim() ? "No customers found matching your search." : "No customers found.";
            $("#noResultsRow").find('td').text(message);
            $("#noResultsRow").show();
        }
    }

    /**
     * Populates the suggestions dropdown based on search results.
     * @param {Array<Object>} customersList - List of customers matching the search.
     * @param {string} currentSearchText - The current text in the search input.
     */
    function fillSuggestionsBox(customersList, currentSearchText) {
        var suggestionsDiv = $("#customerSuggestionsDropdown");
        suggestionsDiv.html(""); // Clear previous suggestions

        if (currentSearchText.length > 0 && customersList && customersList.length > 0) {
            var maxSuggestions = 7;
            var displayedCount = 0;
            for (var i = 0; i < customersList.length && displayedCount < maxSuggestions; i++) {
                var oneCustomer = customersList[i];
                // Basic client-side filtering for relevance, server should ideally provide well-matched results
                if (oneCustomer.customerName.toLowerCase().includes(currentSearchText.toLowerCase()) ||
                    String(oneCustomer.customerId).includes(currentSearchText)) {
                    var suggestionLinkHtml =
                        '<a href="#" class="list-group-item list-group-item-action suggestion-item" data-id="' + oneCustomer.customerId + '">' +
                        oneCustomer.customerName + ' (ID: ' + oneCustomer.customerId + ')' +
                        '</a>';
                    suggestionsDiv.append(suggestionLinkHtml);
                    displayedCount++;
                }
            }
            if (displayedCount > 0) {
                 suggestionsDiv.show();
            } else {
                 suggestionsDiv.hide(); // Hide if no relevant suggestions found from the list
            }
        } else {
            suggestionsDiv.hide(); // Hide if no search text or no customers
        }
    }

    /**
     * Handles click events on suggestion items.
     * Populates the search input with the customer's name and triggers a search.
     */
    function handleSuggestionItemClick(event) {
        event.preventDefault(); // Prevent default link behavior (page jump)
        var selectedText = $(this).text(); // e.g., "Customer Name (ID: 123)"
        // Extract only the name part for the search input, assuming format "Name (ID: XXX)"
        var customerName = selectedText.substring(0, selectedText.lastIndexOf(" (ID:"));
        $("#customerSearchInput").val(customerName); // Populate search input with the name
        $("#customerSuggestionsDropdown").html("").hide(); // Hide suggestions dropdown
        getAndShowCustomers(customerName); // Perform search with the selected customer's name
    }

    /**
     * Hides the suggestions dropdown if a click occurs outside the search container.
     */
    function handleDocumentClickForSuggestions(event) {
        var targetElement = $(event.target);
        // If the click is not on the search input or the suggestions dropdown itself
        if (!targetElement.closest(".search-bar-container").length) {
            $("#customerSuggestionsDropdown").html("").hide();
        }
    }

    /**
     * Handles focus events on the customer search input.
     * Re-fetches and shows suggestions if there's existing text in the input.
     */
    function handleCustomerSearchInputFocus() {
        var currentSearchText = $(this).val().trim();
        if (currentSearchText.length >= 1) {
            // Re-fetch to show suggestions if they were hidden or to refresh them
            getAndShowCustomers(currentSearchText);
        }
    }

    /**
     * Handles click events on "Delete" links in the customer table.
     * Confirms deletion with the user and sends an AJAX request to the server.
     */
    function handleDeleteLinkClick() {
        var customerIdToDelete = $(this).data("id");
        var customerName = $(this).closest("tr").find(".name").text(); // Get name for confirmation message

        if (confirm("Are you sure you want to delete customer: " + customerName + " (ID: " + customerIdToDelete + ")?")) {
            $.ajax({
                // Ensure this URL matches your servlet's mapping for delete
                url: "CustomerServlet?action=deleteAjax&id=" + customerIdToDelete,
                type: "POST", // Or "GET" if your servlet handles delete via GET and action param
                dataType: "json",
                success: function handleDeleteSuccess(serverReply) {
                    if (serverReply.success) {
                        $("#customerRow-" + customerIdToDelete).remove(); // Remove row from table
                        showMyAlertRevised(serverReply.message, "success");
                        // Check if table is empty after deletion and show "No customers" message if needed
                        if ($("#customerTable tbody tr:not(#noResultsRow)").length === 0) {
                            $("#noResultsRow").find('td').text("No customers found.");
                            $("#noResultsRow").show();
                        }
                    } else {
                        showMyAlertRevised(serverReply.message || "Deletion failed. Please try again.", "danger");
                    }
                },
                error: function handleDeleteError(xhr) {
                    var errorMsg = "Could not delete the customer. Please try again.";
                    if(xhr.responseJSON && xhr.responseJSON.message) { // Check for a message from server
                        errorMsg = xhr.responseJSON.message;
                    }
                    showMyAlertRevised(errorMsg, "danger");
                }
            });
        }
    }

    /**
     * Handles click events on "Edit" links.
     * Fetches customer data for the selected customer and populates the edit modal.
     */
    function handleEditLinkClick() {
        var customerIdToEdit = $(this).data("id");
        $.ajax({
            url: "CustomerServlet?action=getCustomerAjax&id=" + customerIdToEdit,
            type: "GET",
            dataType: "json",
            success: function handleGetCustomerSuccess(response) {
                // Servlet might return {success: true, customer: {...}} or just the customer object.
                // This handles both by checking for a 'customer' property first.
                var customerDataFromServer = response.customer || response;

                if (customerDataFromServer && customerDataFromServer.customerId) {
                    $("#editCustomerId").val(customerDataFromServer.customerId);
                    $("#editCustomerName").val(customerDataFromServer.customerName);
                    $("#editMobileNumber").val(customerDataFromServer.mobileNumber);
                    $("#editCustomerLocation").val(customerDataFromServer.customerLocation);
                    $("#editCustomerModal").modal("show");
                } else {
                    // If servlet returns {success: false, message: "..."} or data is invalid
                    var message = response.message || "Customer data not found or could not be retrieved.";
                    showMyAlertRevised(message, "warning");
                }
            },
            error: function handleGetCustomerError() {
                showMyAlertRevised("Could not retrieve customer details for editing. Please try again.", "danger");
            }
        });
    }

    /**
     * Handles the submission of the edit customer form.
     * Sends updated data to the server via AJAX and updates the table row on success.
     */
    function handleEditFormSubmit(event) {
        event.preventDefault(); // Prevent default form submission (which would reload page)
        var formDetails = $(this).serialize(); // Get form data as a query string

        $.ajax({
            url: "CustomerServlet?action=updateAjax",
            type: "POST",
            data: formDetails,
            dataType: "json",
            success: function handleUpdateSuccess(serverReply) {
                if (serverReply.success && serverReply.customer) {
                    $("#editCustomerModal").modal("hide"); // Close the modal
                    showMyAlertRevised(serverReply.message, "success");

                    var updatedCustomerInfo = serverReply.customer;
                    var customerRowInTable = $("#customerRow-" + updatedCustomerInfo.customerId);

                    // Update the specific cells in the table row with new data
                    customerRowInTable.find(".name").text(updatedCustomerInfo.customerName);
                    customerRowInTable.find(".mobile").text(updatedCustomerInfo.mobileNumber);
                    customerRowInTable.find(".location").text(updatedCustomerInfo.customerLocation);
                } else {
                    // Show error message (e.g., validation error from server, or general update failure)
                    // Ideally, this error could be shown inside the modal for better UX.
                    showMyAlertRevised(serverReply.message || "Update failed. Please check the details and try again.", "danger");
                }
            },
            error: function handleUpdateError() {
                showMyAlertRevised("Could not update customer. An unexpected error occurred. Please try again.", "danger");
            }
        });
    }
    </script>
</body>
</html>