package com.vo;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class ProductInfoTest {

    @Test
    void testProductInfoConstructorWithQuantityAndGetters() {
        String productId = "PROD001";
        String productName = "Silk Saree";
        String productDescription = "Authentic Kanchipuram Silk Saree";
        String unit = "pcs";
        float unitPrice = 5000.00f;
        String category = "Sarees";
        float tax = 5.0f; // 5%
        int quantity = 2;

        ProductInfo product = new ProductInfo(productId, productName, productDescription, unit, unitPrice, category, tax, quantity);

        assertEquals(productId, product.getProductId());
        assertEquals(productName, product.getProductName());
        assertEquals(productDescription, product.getProductDescription());
        assertEquals(unit, product.getUnit());
        assertEquals(unitPrice, product.getUnitPrice(), 0.001);
        assertEquals(category, product.getCategory());
        assertEquals(tax, product.getTax(), 0.001);
        assertEquals(quantity, product.getQuantity());
    }

    @Test
    void testProductInfoConstructorDefaultQuantity() {
        ProductInfo product = new ProductInfo("PROD002", "Cotton Shirt", "Pure Cotton", "pcs", 800.0f, "Shirts", 12.0f);
        assertEquals(1, product.getQuantity(), "Default quantity should be 1");
    }

    @Test
    void testSetters() {
        ProductInfo product = new ProductInfo("PROD003", "Test Item", "Test Desc", "unit", 10.0f, "Test Cat", 0.0f, 1);

        product.setProductId("PROD004");
        assertEquals("PROD004", product.getProductId());

        product.setProductName("New Name");
        assertEquals("New Name", product.getProductName());

        product.setProductDescription("New Desc");
        assertEquals("New Desc", product.getProductDescription());

        product.setUnit("new_unit");
        assertEquals("new_unit", product.getUnit());

        product.setUnitPrice(20.0f);
        assertEquals(20.0f, product.getUnitPrice(), 0.001);

        product.setCategory("New Cat");
        assertEquals("New Cat", product.getCategory());

        product.setTax(10.0f);
        assertEquals(10.0f, product.getTax(), 0.001);

        product.setQuantity(5);
        assertEquals(5, product.getQuantity());
    }

    @Test
    void testGetTotalAmount() {
        ProductInfo product = new ProductInfo("PROD005", "Test Gadget", "Electronic", "item", 100.0f, "Electronics", 10.0f, 3);
        // Price per unit = 100
        // Tax per unit = 100 * (10/100) = 10
        // Total price per unit (incl tax) = 100 + 10 = 110
        // Total amount for 3 quantities = 110 * 3 = 330
        float expectedTotalAmount = (100.0f + (100.0f * 0.10f)) * 3;
        assertEquals(expectedTotalAmount, product.getTotalAmount(), 0.001);
    }

     @Test
    void testGetTotalAmountWithZeroTax() {
        ProductInfo product = new ProductInfo("PROD006", "Tax-Free Item", "No Tax", "item", 50.0f, "Misc", 0.0f, 2);
        // Price per unit = 50
        // Tax per unit = 50 * (0/100) = 0
        // Total price per unit (incl tax) = 50 + 0 = 50
        // Total amount for 2 quantities = 50 * 2 = 100
        float expectedTotalAmount = 50.0f * 2;
        assertEquals(expectedTotalAmount, product.getTotalAmount(), 0.001);
    }
}