package com.util;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.condition.EnabledIfSystemProperty;

import java.sql.Connection;
import java.sql.SQLException;

import static org.junit.jupiter.api.Assertions.*;

public class DBUtilTest {

    @Test
    void testDBUtilClassLoadsAndDriverInitializes() {
        try {
            
            Class<?> dbUtilClass = Class.forName("com.util.DBUtil");
            assertNotNull(dbUtilClass, "DBUtil class should be loadable.");
            System.out.println("DBUtil class loaded successfully, JDBC driver likely initialized.");
        } catch (ClassNotFoundException e) {
            fail("DBUtil class itself was not found on the classpath: " + e.getMessage(), e);
        } catch (ExceptionInInitializerError e) {
            // This error indicates a failure within the static initializer block of DBUtil.
            Throwable cause = e.getCause();
            String causeMessage = (cause != null) ? cause.getMessage() : "Unknown cause";
            fail("Static initializer of DBUtil failed. This often means the JDBC driver (com.mysql.cj.jdbc.Driver) was not found or failed to load: " + causeMessage, e);
        }
    }


    @Test
    @EnabledIfSystemProperty(named = "run.integration.tests", matches = "true")
    void testGetConnection_IntegrationTest() {
        Connection connection = null;
        try {
            System.out.println("Attempting INTEGRATION TEST: DBUtil.getConnection()...");
            System.out.println("Ensure MySQL is running at jdbc:mysql://localhost:3306/billingsystem with correct credentials.");
            
            connection = DBUtil.getConnection();
            assertNotNull(connection, "Connection should not be null if database is accessible.");


            System.out.println("Successfully connected to the database: " + connection.getMetaData().getURL());

        } catch (SQLException e) {
           
            e.printStackTrace(); 
            fail("SQLException during DBUtil.getConnection() integration test. " +
                 "Ensure database is running and accessible with credentials in DBUtil. Error: " + e.getMessage(), e);
        } catch (ExceptionInInitializerError e) {

            Throwable cause = e.getCause();
            String causeMessage = (cause != null) ? cause.getMessage() : "Unknown cause";
            fail("Static initializer of DBUtil failed during integration test. Check JDBC driver: " + causeMessage, e);
        } finally {
            if (connection != null) {
                try {
                    connection.close();
                } catch (SQLException e) {
                    
                    System.err.println("Error closing connection in test: " + e.getMessage());
                }
            }
        }
    }

    /**
     * This test demonstrates what happens if you call getConnection
     * and the database is likely unavailable. It expects an SQLException.
     * This is also an integration test.
     *
     * If the system property 'run.integration.tests' is not set to 'true'
     * AND 'force.db.unavailable.test' is not set to 'true', this test will be skipped.
     * This allows running it even if other integration tests are off, for specific scenarios.
     */
    @Test
    @EnabledIfSystemProperty(named = "force.db.unavailable.test", matches = "true")
    // Or, to run it with other integration tests:
    // @EnabledIfSystemProperty(named = "run.integration.tests", matches = "true")
    void testGetConnection_ExpectSQLException_WhenDBUnavailable_IntegrationTest() {
        System.out.println("Attempting INTEGRATION TEST: DBUtil.getConnection() expecting SQLException (DB unavailable)...");
        System.out.println("This test assumes the database IS NOT available or credentials are WRONG.");

        // Ensure this test doesn't accidentally pass if a DB is running.
        // For a real "DB unavailable" test, you'd typically point to a non-existent DB
        // or use incorrect credentials, but DBUtil has hardcoded values.
        // So this test relies on the actual DB being down or misconfigured.
        
        Exception exception = assertThrows(Exception.class, () -> {
            // We expect an SQLException, but an ExceptionInInitializerError could also occur
            // if the driver isn't found, so catch broader Exception first.
            DBUtil.getConnection();
        }, "Expected an exception when database is unavailable or driver fails.");

        if (exception instanceof SQLException) {
            System.out.println("SQLException correctly thrown: " + exception.getMessage());
            // Further assertions on the SQLException can be made here if needed
        }
    }
}
