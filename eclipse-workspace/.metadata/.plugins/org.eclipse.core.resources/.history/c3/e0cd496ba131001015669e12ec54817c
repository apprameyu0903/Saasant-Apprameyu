package com.saasant.firstSpringProject.controller;

import com.saasant.firstSpringProject.service.CustomerServiceInterface;
import com.saasant.firstSpringProject.service.CustomerService;
import com.saasant.firstSpringProject.vo.CustomerDetails;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/customers")
public class CustomerController {

    private final CustomerServiceInterface customerService = new CustomerService();



    @GetMapping("/{customerId}")
    public ResponseEntity<CustomerDetails> getCustomerById(@PathVariable String customerId) {
        CustomerDetails customerDetails = customerService.getCustomerById(customerId);
        if (customerDetails != null && customerDetails.getCustomerId() != null) {
            return ResponseEntity.ok(customerDetails);
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    @GetMapping
    public ResponseEntity<List<CustomerDetails>> getAllCustomers() {
        List<CustomerDetails> customers = customerService.getAllCustomers();
        return ResponseEntity.ok(customers);
    }
    
    @PostMapping
    public ResponseEntity<CustomerDetails> addCustomer(@RequestBody CustomerDetails customerDetails) {
        System.out.println("Placeholder: addCustomer API called for " + customerDetails.getCustomerName());
        return ResponseEntity.status(HttpStatus.CREATED).body(customerDetails);
    }

    /*@PutMapping("/{customerId}")
    public ResponseEntity<CustomerDetails> updateCustomer(@PathVariable String customerId, @RequestBody CustomerDetails customerDetails) {
        customerDetails.setCustomerId(customerId);
        System.out.println("Placeholder: updateCustomer API called for ID " + customerId);
        return ResponseEntity.ok(customerDetails);
    }*/

    @DeleteMapping("/{customerId}")
    public ResponseEntity<Void> deleteCustomer(@PathVariable String customerId) {
        customerService.deleteCustomer(customerId);
        return ResponseEntity.noContent().build();
    }
}
