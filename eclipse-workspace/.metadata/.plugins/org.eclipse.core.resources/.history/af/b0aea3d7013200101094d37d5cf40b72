<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Customer List</title>
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <%-- Link to your existing style.css if it's not already included via Bootstrap or if it has specific styles you need --%>
    <link rel="stylesheet" type="text/css" href="${pageContext.request.contextPath}/style.css">
</head>
<body>

    <header class="page-header">
        <div class="container">
            <span class="header-title">Billing System</span>
        </div>
    </header>

    <div class="container mt-4">
        <div class="content-wrapper">
            <div class="d-flex justify-content-between align-items-center mb-3 title-section">
                <h1 class="page-title mb-0">Customer Management</h1>
                <a href="CustomerServlet?action=showAddForm" class="btn btn-primary add-customer-btn">Add New Customer</a>
            </div>

            <c:if test="${not empty successMessage}">
                <div class="alert alert-success alert-dismissible fade show" role="alert" id="successMessageDiv">
                    ${successMessage}
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                </div>
            </c:if>
            <c:if test="${not empty errorMessage}">
                <div class="alert alert-danger alert-dismissible fade show" role="alert" id="errorMessageDiv">
                    ${errorMessage}
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                </div>
            </c:if>
            <div id="ajaxAlertPlaceholder"></div>

            <div class="search-bar-container">
                <div class="form-group">
                    <input type="text" class="form-control" id="customerSearchInput" placeholder="Search customers by Name, ID, Mobile, or Location...">
                    <div id="customerSuggestionsDropdown" class="list-group" style="display: none;">
                    </div>
                </div>
            </div>

            <div class="table-container">
                <table class="table table-striped customer-table" id="customerTable">
                    <thead class="thead-dark">
                        <tr>
                            <th>ID</th>
                            <th>Name</th>
                            <th>Mobile</th>
                            <th>Location</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                       <!--  <c:forEach var="customer" items="${customers}">
                            <tr id="customerRow-${customer.customerId}">
                                <td>${customer.customerId}</td>
                                <td class="name">${customer.customerName}</td>
                                <td class="mobile">${customer.mobileNumber}</td>
                                <td class="location">${customer.customerLocation}</td>
                                <td>
                                    <a class="action-link edit-link text-primary mr-2" data-id="${customer.customerId}">Edit</a>
                                    <a class="action-link delete-link text-danger" data-id="${customer.customerId}">Delete</a>
                                </td>
                            </tr>
                        </c:forEach>
                         <tr id="noResultsRow" style="display: none;">
                            <td colspan="5" class="text-center">No customers found matching your search.</td>
                        </tr>-->
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <div class="modal fade" id="editCustomerModal" tabindex="-1" role="dialog" aria-labelledby="editCustomerModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <form id="editCustomerForm">
                    <div class="modal-header">
                        <h5 class="modal-title" id="editCustomerModalLabel">Edit Customer</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <input type="hidden" id="editCustomerId" name="customerId">
                        <div class="form-group">
                            <label for="editCustomerName">Name</label>
                            <input type="text" class="form-control" id="editCustomerName" name="customerName" required>
                        </div>
                        <div class="form-group">
                            <label for="editMobileNumber">Mobile Number</label>
                            <input type="text" class="form-control" id="editMobileNumber" name="mobileNumber" required pattern="[0-9]{10,15}">
                        </div>
                        <div class="form-group">
                            <label for="editCustomerLocation">Location</label>
                            <input type="text" class="form-control" id="editCustomerLocation" name="customerLocation" required>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Save changes</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <footer class="page-footer">
        <p>&copy; <script>document.write(new Date().getFullYear())</script> Billing System. All rights reserved.</p>
    </footer>

    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

    
    <script>
    // API endpoint for customer data
    const API_BASE_URL = 'http://localhost:8081/api/customers';

    $(document).ready(initializePage);

    function initializePage() {
        setTimeout(fadeOutMessages, 3000); // For initial JSTL messages

        // Using debounce for search input to avoid rapid API calls
        $("#customerSearchInput").on("keyup", debounce(handleCustomerSearchInputKeyup, 300));
        $("#customerSuggestionsDropdown").on("click", ".suggestion-item", handleSuggestionItemClick);
        $(document).on("click", handleDocumentClickForSuggestions);
        $("#customerSearchInput").on("focus", handleCustomerSearchInputFocus);
        $("#customerTable").on("click", ".delete-link", handleDeleteLinkClick);
        $("#customerTable").on("click", ".edit-link", handleEditLinkClick);
        $("#editCustomerForm").on("submit", handleEditFormSubmit);

        getAndShowCustomers(""); // Load all customers initially
    }

    function debounce(func, delay) {
        let timeout;
        return function(...args) {
            clearTimeout(timeout);
            timeout = setTimeout(() => func.apply(this, args), delay);
        };
    }

    function fadeOutMessages() {
        $("#successMessageDiv, #errorMessageDiv").fadeOut("slow");
    }

    function showAlertRevised(messageText, alertType) {
        const alertBoxArea = $("#ajaxAlertPlaceholder");
        alertBoxArea.html(''); // Clear previous alerts
        const newAlertHtml =
            `<div class="alert alert-${alertType} alert-dismissible fade show" role="alert">
                ${messageText}
                <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
            </div>`;
        alertBoxArea.html(newAlertHtml);
        setTimeout(function() {
            alertBoxArea.find(".alert").fadeOut("slow", function() { $(this).remove(); });
        }, 3000);
    }

    function handleCustomerSearchInputKeyup() {
        const searchInputValue = $("#customerSearchInput").val().trim().toLowerCase();
        getAndShowCustomers(searchInputValue);
    }

    function getAndShowCustomers(searchText) {
        let ajaxData = {};
        // If your API supports a 'query' parameter for searching:
        if (searchText) {
            ajaxData.query = searchText;
        }
        $.ajax({
            url: API_BASE_URL,
            type: "GET",
            data: ajaxData, // Send 'query' parameter if searchText is present
            dataType: "json",
            success: function(customersFromServer) {
                console.log("Data from server (getAndShowCustomers):", JSON.parse(JSON.stringify(customersFromServer)));

                // Assuming server handles filtering if 'query' param is sent.
                // If not, you'd filter 'customersFromServer' here based on 'searchText'.
                fillCustomerTable(customersFromServer);

                if (searchText && $("#customerSearchInput").is(":focus")) {
                    // Pass the (potentially already server-filtered) list for suggestions
                    fillSuggestionsBox(customersFromServer, searchText);
                } else {
                    $("#customerSuggestionsDropdown").html("").hide();
                }
            },
            error: function(xhr) {
                console.error("AJAX Error fetching customers:", xhr.status, xhr.responseText);
                showAlertRevised("Oops! Something went wrong while fetching customer data.", "danger");
                $("#customerTable tbody").html('');
                showNoResultsMessage("Error loading customer data. Please try again.");
            }
        });
    }

    function fillCustomerTable(customersList) {
        console.log("Data received by fillCustomerTable:", JSON.parse(JSON.stringify(customersList)));
        const tableBodyElement = $("#customerTable tbody");
        tableBodyElement.empty();

        if (customersList && customersList.length > 0) {
            $("#noResultsRow").hide();
            customersList.forEach(function(oneCustomer, index) {
                console.log('Populating row for customer at index ' + index + ':', JSON.parse(JSON.stringify(oneCustomer)));

                // Use '|| "N/A"' to handle null, undefined, or empty string values gracefully
                const displayId = oneCustomer.customerId || "N/A";
                const displayName = oneCustomer.customerName || "N/A";
                const displayMobile = oneCustomer.mobileNumber || "N/A";
                const displayLocation = oneCustomer.customerLocation || "N/A";

                // For detailed debugging of values going into the table:
                // console.log('  Display ID: ' + displayId + ' (Type: ' + typeof displayId + ')');
                // console.log('  Display Name: ' + displayName + ' (Type: ' + typeof displayName + ')');
                // console.log('  Display Mobile: ' + displayMobile + ' (Type: ' + typeof displayMobile + ')');
                // console.log('  Display Location: ' + displayLocation + ' (Type: ' + typeof displayLocation + ')');

                // Using template literals for cleaner HTML string construction
                const tableRowHtml = `
                    <tr id="customerRow-${oneCustomer.customerId}"> {/* Use actual customerId for unique row ID */}
                        <td>${displayId}</td>
                        <td class="name">${displayName}</td>
                        <td class="mobile">${displayMobile}</td>
                        <td class="location">${displayLocation}</td>
                        <td>
                            <a class="action-link edit-link text-primary mr-2" href="#" data-id="${oneCustomer.customerId}">Edit</a>
                            <a class="action-link delete-link text-danger" href="#" data-id="${oneCustomer.customerId}">Delete</a>
                        </td>
                    </tr>`;
                // console.log("   Generated HTML for row " + index + ":", tableRowHtml);
                tableBodyElement.append(tableRowHtml);
            });
        } else {
            const message = $("#customerSearchInput").val().trim() ? "No customers found matching your search." : "No customers available.";
            showNoResultsMessage(message);
        }
    }

    function showNoResultsMessage(message) {
        const tableBodyElement = $("#customerTable tbody");
        if (tableBodyElement.find("#noResultsRow").length === 0) {
             tableBodyElement.append('<tr id="noResultsRow"><td colspan="5" class="text-center"></td></tr>');
        }
        $("#noResultsRow td").text(message);
        $("#noResultsRow").show();
    }

    function fillSuggestionsBox(customersList, currentSearchText) {
        const suggestionsDiv = $("#customerSuggestionsDropdown");
        suggestionsDiv.empty().hide();

        if (currentSearchText && currentSearchText.length > 0 && customersList && customersList.length > 0) {
            let displayedCount = 0;
            const maxSuggestions = 7;
            // Client-side filtering for suggestions, as server might return more than needed for suggestions.
            const relevantCustomers = customersList.filter(customer =>
                (customer.customerName && customer.customerName.toLowerCase().includes(currentSearchText)) ||
                (String(customer.customerId).toLowerCase().includes(currentSearchText))
            );

            for (let i = 0; i < relevantCustomers.length && displayedCount < maxSuggestions; i++) {
                const oneCustomer = relevantCustomers[i];
                const suggestionLinkHtml =
                    `<a href="#" class="list-group-item list-group-item-action suggestion-item" data-id="${oneCustomer.customerId}" data-name="${oneCustomer.customerName}">
                        ${oneCustomer.customerName} (ID: ${oneCustomer.customerId})
                     </a>`;
                suggestionsDiv.append(suggestionLinkHtml);
                displayedCount++;
            }
            if (displayedCount > 0) {
                suggestionsDiv.show();
            }
        }
    }

    function handleSuggestionItemClick(event) {
        event.preventDefault();
        const customerName = $(this).data("name");
        $("#customerSearchInput").val(customerName);
        $("#customerSuggestionsDropdown").empty().hide();
        getAndShowCustomers(customerName.toLowerCase()); // Re-fetch/filter based on selection
    }

    function handleDocumentClickForSuggestions(event) {
        if (!$(event.target).closest(".search-bar-container").length) {
            $("#customerSuggestionsDropdown").empty().hide();
        }
    }

    function handleCustomerSearchInputFocus() {
        const currentSearchText = $("#customerSearchInput").val().trim().toLowerCase();
        if (currentSearchText.length >= 1) {
            // To avoid too many calls, this could be removed or made more selective.
            // Debounce on keyup is generally preferred.
            // getAndShowCustomers(currentSearchText);
        }
    }

    function handleDeleteLinkClick(event) {
        event.preventDefault();
        const customerIdToDelete = $(this).data("id");
        const customerName = $(this).closest("tr").find(".name").text();

        if (confirm(`Are you sure you want to delete customer: ${customerName} (ID: ${customerIdToDelete})?`)) {
            $.ajax({
                url: `${API_BASE_URL}/${customerIdToDelete}`, // CORRECTED URL
                type: "DELETE",
                success: function(response, status, xhr) {
                    // For DELETE, a 204 No Content is common, or 200 OK if a message is returned.
                    $("#customerRow-" + customerIdToDelete).remove();
                    showAlertRevised(`Customer ${customerName} deleted successfully.`, "success");
                    if ($("#customerTable tbody tr:not(#noResultsRow)").length === 0) {
                         showNoResultsMessage("No customers available.");
                    }
                },
                error: function(xhr) {
                    console.error("Delete error:", xhr.status, xhr.responseText);
                    let errorMsg = "Could not delete the customer.";
                    if (xhr.responseJSON && xhr.responseJSON.message) {
                        errorMsg = xhr.responseJSON.message;
                    } else if (xhr.status === 404) {
                        errorMsg = "Customer not found for deletion.";
                    } else if (xhr.statusText) {
                         errorMsg += " Server responded: " + xhr.statusText;
                    }
                    showAlertRevised(errorMsg, "danger");
                }
            });
        }
    }

    function handleEditLinkClick(event) {
        event.preventDefault();
        const customerIdToEdit = $(this).data("id");
        $.ajax({
            url: `${API_BASE_URL}/${customerIdToEdit}`, // CORRECTED URL
            type: "GET",
            dataType: "json",
            success: function(customerDataFromServer) {
                if (customerDataFromServer && customerDataFromServer.customerId) {
                    $("#editCustomerId").val(customerDataFromServer.customerId);
                    $("#editCustomerName").val(customerDataFromServer.customerName);
                    $("#editMobileNumber").val(customerDataFromServer.mobileNumber);
                    $("#editCustomerLocation").val(customerDataFromServer.customerLocation);
                    $("#editCustomerModal").modal("show");
                } else {
                    showAlertRevised("Customer data not found or could not be retrieved.", "warning");
                }
            },
            error: function(xhr) {
                 console.error("Edit fetch error:", xhr.status, xhr.responseText);
                 let errorMsg = "Could not retrieve customer details for editing.";
                 if(xhr.status === 404){
                    errorMsg = "Customer not found.";
                 }
                showAlertRevised(errorMsg, "danger");
            }
        });
    }

    function handleEditFormSubmit(event) {
        event.preventDefault();
        const customerId = $("#editCustomerId").val();
        const customerData = {
            // customerId: customerId, // Not always needed in body if ID is in URL for PUT
            customerName: $("#editCustomerName").val(),
            mobileNumber: $("#editMobileNumber").val(),
            customerLocation: $("#editCustomerLocation").val()
        };

        $.ajax({
            url: `${API_BASE_URL}/${customerId}`, // CORRECTED URL
            type: "PUT",
            contentType: "application/json",    // Set content type to JSON
            data: JSON.stringify(customerData), // Convert JS object to JSON string
            dataType: "json",                   // Expect JSON response
            success: function(updatedCustomerInfo) {
                $("#editCustomerModal").modal("hide");
                showAlertRevised(`Customer ${updatedCustomerInfo.customerName} updated successfully.`, "success");

                // Update the row in the table
                const customerRowInTable = $(`#customerRow-${updatedCustomerInfo.customerId}`);
                if (customerRowInTable.length) { // Check if row exists
                    customerRowInTable.find(".name").text(updatedCustomerInfo.customerName || "N/A");
                    customerRowInTable.find(".mobile").text(updatedCustomerInfo.mobileNumber || "N/A");
                    customerRowInTable.find(".location").text(updatedCustomerInfo.customerLocation || "N/A");
                } else {
                    // If row wasn't found, refresh the whole table to be safe
                    getAndShowCustomers("");
                }
            },
            error: function(xhr) {
                console.error("Update error:", xhr.status, xhr.responseText);
                let errorMsg = "Could not update customer.";
                 if (xhr.responseJSON && xhr.responseJSON.message) {
                    errorMsg = xhr.responseJSON.message;
                } else if (xhr.status === 404) {
                     errorMsg = "Customer not found for update.";
                } else if (xhr.status === 400) {
                     errorMsg = "Invalid data submitted for update. Please check fields.";
                }
                showAlertRevised(errorMsg, "danger");
            }
        });
    }
    </script>
</body>
</html>